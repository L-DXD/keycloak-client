import com.vanniktech.maven.publish.SonatypeHost

plugins {
    id 'java'
    id 'java-library'
    id "com.vanniktech.maven.publish" version "0.28.0"
    id 'signing'
}

group 'io.github.l-dxd'
version = '0.0.18'
description = '"Client for convenient use of the Keycloak API'

tasks.withType(Javadoc) {
    options {
        encoding 'UTF-8'
    }
}

signing {
    def secretFile = file('secret.asc')
    def signingKey = secretFile.exists() ? secretFile.text : null

    if (signingKey != null) {
        useInMemoryPgpKeys(
                "-----BEG" + signingKey,
                findProperty("signing.password") as String
        )
        sign publishing.publications
    } else {
        println "The secret.asc file does not exist. Skipping GPG signing."
    }
    sign publishing.publications
}

java {
    sourceCompatibility = '17'
    targetCompatibility = '17'
    modularity.inferModulePath = false
}

mavenPublishing {
    publishToMavenCentral(SonatypeHost.CENTRAL_PORTAL)
    signAllPublications()

    coordinates("io.github.l-dxd", "keycloak-client", project.version as String)

    pom {
        name = "keycloak-client"
        description = "Client for convenient use of the Keycloak API"
        inceptionYear = "2025"
        url = "https://github.com/L-DXD/keycloak-client"
        licenses {
            license {
                name = "MIT License"
                url = "https://opensource.org/licenses/MIT"
                distribution = "repo"
            }
        }
        developers {
            developer {
                id = "sangwonyu"
                name = "sangwonyu"
                url = "https://github.com/sangwonyu"
            }
        }
        scm {
            url = "https://github.com/L-DXD/keycloak-client"
            connection = "scm:git:git://github.com/L-DXD/keycloak-client.git"
            developerConnection = "scm:git:ssh://git@github.com/L-DXD/keycloak-client.git"
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {
    api 'io.jsonwebtoken:jjwt-api:0.11.5'
    api 'org.keycloak:keycloak-client-common-synced:26.0.4'

    implementation 'io.projectreactor.netty:reactor-netty-http:1.1.13'
    implementation 'io.projectreactor:reactor-core:3.4.29'

    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.4.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'

    implementation 'org.slf4j:slf4j-api:2.0.17'

    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.8.2'
    testImplementation 'io.projectreactor:reactor-test:3.4.29'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.12.0'
    testImplementation 'org.assertj:assertj-core:3.24.2'
    testImplementation 'com.github.dasniko:testcontainers-keycloak:3.7.0'
    testImplementation 'org.testcontainers:junit-jupiter:1.19.3'
    testCompileOnly 'org.projectlombok:lombok:1.18.24'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'
}


test {
    useJUnitPlatform()
}